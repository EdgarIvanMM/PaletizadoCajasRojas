MODULE MainModule
	PERS tooldata gripperIvan := [TRUE,[[3.17064,-2.57344,215.554],[1,0,0,0]],[1.6,[0.9,0,63.5],[1,0,0,0],0.011,0.012,0.01]];
	PERS wobjdata wobjIzquierda := [FALSE,TRUE,"",[[641.443,359.771,75.0655],[0.707111,2.24798E-05,-1.89234E-05,-0.707102]],[[0,0,0],[1,0,0,0]]];
	PERS wobjdata wobjDerecha := [FALSE,TRUE,"",[[615.612,-660.879,107.688],[7.12328E-05,-0.0218209,-0.999762,-3.46191E-05]],[[0,0,0],[1,0,0,0]]];
    
    !HOME
	CONST robtarget homeCr := [[867.21,17.59,709.44],[0.0158114,-0.0347332,0.999225,-0.00958957],[0,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    !ROBTARGETS para agarrar caja
	CONST robtarget acercamiento := [[780.90,560.28,169.32],[0.00133958,0.735779,-0.677151,-0.00973216],[0,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; !Posicion donde se acerca a caja a tomar
	CONST robtarget bajar := [[780.87,560.28,103.51],[0.00135466,0.735812,-0.677114,-0.00975317],[0,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];  !Posicion donde baja para agarrar caja
    
    CONST robtarget subirSalir := [[780.92,560.29,226.96],[0.00132625,0.73579,-0.677139,-0.00973382],[0,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; !Punto para que no vaya dirctamente a dejar caja.
    
    VAR NUM caja := 1; !Variable para el conteo de la caja en la que se va.
    
    !Variables para incrementar OFFSETS en el dejado de cajas.
    !Se creo una para cada posicion porque se corren al mismo tiempo todos los ciclos for y while, lo que imposibiliza el conteo actualizado de variable caja.
    VAR NUM incrOffBajarDejar := 0;     !  Para aumentar Z de robtarget "bajarDejar". Inicializada en 0 para partir desde la coordenada inicial. 
    VAR NUM incrOffBajarDejar2 := 0;    
    VAR NUM incrOffBajarDejar3 := 0;      
    VAR NUM incrOffBajarDejarV1 := 0;   !  = Se creo ya que el punto cambia por la posicion de la herramienta en el dejado del acomodo 2 
    VAR NUM incrOffBajarDejarV2 := 0;   
    
    !Para dejar caja 1
	CONST robtarget acercarDer := [[794.77,-376.17,272.41],[0.0159481,-0.0347941,0.99922,-0.00970607],[-1,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];  !Posicion antes de bajar a dejar caja
	CONST robtarget bajarDejar := [[794.63,-376.13,106.45],[0.0157791,-0.0346898,0.999227,-0.00961924],[-1,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; !Punto donde se dejara caja 
    
    !Para dejar caja 2
    CONST robtarget acercarPos2 := [[794.77,-464.21,272.38],[0.0159436,-0.0347285,0.999223,-0.00969995],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; ! = linea 23 / Correspondiente a caja 2
    CONST robtarget bajarDejar2 := [[794.74,-464.19,107.25],[0.015917,-0.0347236,0.999223,-0.00968153],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];  ! = Linea 24 / Correspondiente a caja 2
    
    !Para dejar caja 3
    CONST robtarget acercarPos3 := [[794.77,-552.25,272.35],[0.0159436,-0.0347285,0.999223,-0.00969995],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget bajarDejar3 := [[794.74,-552.25,107.25],[0.015917,-0.0347236,0.999223,-0.00968153],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    !Posiciones de herramienta dejando vertical
    CONST robtarget acercarPos1c2Arreglo2 := [[838.81,-469.42,255.39],[0.0181458,0.678616,0.734257,0.00435325],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; !Punto antes de bajar a dejar caja. / De manera vertical
    CONST robtarget bajarDejar1c2Arreglo2 := [[838.80,-469.42,137.57],[0.0181243,0.678626,0.734247,0.00434729],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; !Punto donde se dejara caja. / De manera vertical
	
    CONST robtarget acercarPos2c2Arreglo2 := [[739.79,-469.42,255.41],[0.0181635,0.678599,0.734272,0.00436605],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; != Linea 38 
    CONST robtarget bajarDejar2c2Arreglo2 := [[739.77,-469.40,142.20],[0.0181358,0.678613,0.734259,0.00436193],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; != Linea 39
    
!Main iniciara siempre preguntando el tipo de arreglo.
PROC main()
    seleccionarArreglo;
ENDPROC

!PROC Correspondiente al dejado de caja con el tipo de arreglo 1. (Deja las cajas en tres filas con 4 cajas.)
PROC Caja_red()
    
    !Deja las cajas 1, 4, 5, 7 y 10
    if caja = 1 OR caja = 4 OR caja = 7 OR caja = 10 THEN                                       !Si la caja corresponde a la caja 1, 4, 7 o 10.  (Comparten el robtarget acercarDer por su posicion, solo sube el Z)
        for i FROM 1 to 4 DO                                                                    ! Ciclo que se repite 4 veces solo si corresponde a la caja especificada en el IF (Son 4 cajas en esa posicion solo aumentando Z)
            MoveJ acercarDer, v500, z50, gripperIvan;                                           !Hace un movimiento J hasta la posicion acercarDer (Posicion antes de bajar a tomar caja)
            MoveL Offs(bajarDejar, 0, 0, +incrOffBajarDejar), v1000, z50, gripperIvan;          !Baja a la posicion donde se dejara caja. Z se basa en variable incrOffBajarDejar, inicia en 0 (posicion declarada originalmente) y aumenta 32mm en cada paso por el ciclo.
            WaitRob \ZeroSpeed;                                                                 !El robot espera a estar detenido antes de abrir gripper. 
            Reset ABB_Scalable_IO_0_DO2;                                                        !Se abre gripper 
            WaitTime 1;                                                                         !Espera 1 segundo antes de irse a tomar otra caja (PROC tomarCaja)
            Incr caja;                                                                          !Incrementa el numero de la caja.                                
            Add incrOffBajarDejar, 32;                                                          !Se le suman 32 mm a la variable "incrOffBajarDejar"
            tomarCaja;                                                                          !Se va a tomar la siguiente caja
        ENDFOR
    ENDIF   

    !Mismas instrucciones que el primer condicional IF de este PROC. Solo cambian los robtargets y variable de incremento.
    !Deja las cajas 2, 5, 8 y 11
    if caja = 2 OR caja = 5 OR caja = 8 OR caja = 11 THEN                                       !Si la caja corresponde a la caja 2, 5, 8 u 11.  (Comparten el robtarget acercarDer por su posicion, solo sube el Z)
        for i FROM 1 to 4 DO
            MoveJ acercarPos2, v500, z50, gripperIvan;
            MoveL Offs(bajarDejar2, 0, 0, +incrOffBajarDejar2), v1000, z50, gripperIvan;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            WaitTime 1;
            Incr caja;
            Add incrOffBajarDejar2, 32;
            tomarCaja;
            ENDFOR
    ENDIF 

    !Mismas instrucciones que el primer condicional IF de este PROC. Solo cambian los robtargets y variable de incremento.
    !Deja las cajas 3, 6, 9 y 12
    if caja = 3 OR caja = 6 OR caja = 9 OR caja = 12 THEN !Si la caja corresponde a la caja 3, 6, 9 o 12.  (Comparten el robtarget acercarDer por su posicion, solo sube el Z)
        for i FROM 1 to 4 DO
            MoveJ acercarPos3, v500, z50, gripperIvan;
            MoveL Offs(bajarDejar3, 0, 0, +incrOffBajarDejar3), v1000, z50, gripperIvan;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            WaitTime 1;
            Incr caja;
            Add incrOffBajarDejar3, 32;
            tomarCaja;
        ENDFOR
    ENDIF 
    
ENDPROC

!PROC Correspondiente al dejado de caja con el tipo de arreglo 2. (Deja las cajas en el orden: 1er, 3er y 5ta cama con 3 cajas, 2da y 4ta cama con 2 cajas)
PROC Caja_red2()
    
    !Deja las cajas 1, 6 y 11
   IF caja = 1 OR caja = 6 OR caja = 11 THEN !Si la caja corresponde a la caja 1, 6 o 11.  (Comparten el robtarget acercarDer por su posicion, solo sube el Z)
    FOR i FROM 1 to 4 DO  ! Ciclo que se repite 4 veces solo si corresponde a la caja especificada en el IF.
        MoveJ acercarDer, v500, z50, gripperIvan; !
        MoveL Offs(bajarDejar, 0, 0, +incrOffBajarDejar), v1000, z50, gripperIvan;
        WaitRob \ZeroSpeed;
        Reset ABB_Scalable_IO_0_DO2;
        WaitTime 1;
        Incr caja;
        ADD incrOffBajarDejar, 64;
        tomarCaja;
    ENDFOR
   ENDIF 

    !Mismas instrucciones que el primer condicional IF de este PROC. Solo cambian los robtargets y variable de incremento.
    !Deja las cajas 2, 7 y 12
    IF caja = 2 OR caja = 7 OR caja = 12  THEN !Si la caja corresponde a la caja 2, 7 o 12.  (Comparten el robtarget acercarDer por su posicion, solo sube el Z)
        for i FROM 1 to 4 DO 
            MoveJ acercarPOS2, v500, z50, gripperIvan;
            MoveL Offs(bajarDejar2, 0, 0, +incrOffBajarDejar2), v1000, z50, gripperIvan;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            WaitTime 1;
            Incr caja;
            ADD incrOffBajarDejar2, 64;
            tomarCaja;
        ENDFOR
    ENDIF 

    !Mismas instrucciones que el primer condicional IF de este PROC. Solo cambian los robtargets y variable de incremento.
    !Deja las cajas 3 y 8
    IF caja = 3 OR caja = 8 THEN  !Si la caja corresponde a la caja 3 y 8.  (Comparten el robtarget acercarDer por su posicion, solo sube el Z)
        for i FROM 1 to 4 DO !(*Comprobar con FROM 1 to 3 DO ya que la ultima cama solo pasar 2 cajas.)
            MoveJ acercarPos3, v500, z50, gripperIvan;
            MoveL Offs(bajarDejar3, 0, 0, +incrOffBajarDejar3), v1000, z50, gripperIvan;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            WaitTime 1;
            Incr caja;
            ADD incrOffBajarDejar3, 64;
            tomarCaja;
        ENDFOR
    ENDIF 

    !Mismas instrucciones que el primer condicional IF de este PROC. Solo cambian los robtargets y variable de incremento.
    !Deja las cajas 4 y 9
    !Cama volteada (2, 3)
    if caja = 4 OR caja = 9 THEN !Si la caja corresponde a la caja 4 y 9.  (Comparten el robtarget acercarDer por su posicion, solo sube el Z)
        for i FROM 1 to 4 DO
            MoveJ acercarPos1c2Arreglo2, v500, z50, gripperIvan;
            MoveL Offs(bajarDejar1c2Arreglo2, 0, 0, +incrOffBajarDejarV1), v1000, z50, gripperIvan;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            WaitTime 1;
            Incr caja;
            ADD incrOffBajarDejarV1, 64;
            tomarCaja;
        ENDFOR
    ENDIF 

    !Mismas instrucciones que el primer condicional IF de este PROC. Solo cambian los robtargets y variable de incremento.
    !Deja las cajas 5 y 10
    IF caja = 5 OR caja = 10 THEN !Si la caja corresponde a la caja 5 y 10.  (Comparten el robtarget acercarDer por su posicion, solo sube el Z)
        FOR i FROM 1 to 4 DO
            MoveJ acercarPos2c2Arreglo2, v500, z50, gripperIvan;
            MoveL Offs(bajarDejar2c2Arreglo2, 0, 0, +incrOffBajarDejarV2), v1000, z50, gripperIvan;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            WaitTime 1;
            Incr caja;
            ADD incrOffBajarDejarV2, 64;
            tomarCaja;
        ENDFOR
    ENDIF
ENDPROC

!PROC que toma las cajas. Puede tomar en 3 posiciones distintas 
PROC tomarCaja()
    MoveJ homeCr,v500,z50,gripperIvan;   !Movimiento J hasta HOME (Siempree antes de ir a tomar cajas)
    
    IF caja > 12 THEN   !Si la caja en la que va es mayor a 10 preguntar reinicio (Siginifica que ya dejo las 12 cajas)
            preguntaReinicio;  
    ENDIF
    
    WHILE caja <=  12 DO !Ciclo While, siempre que la caja sea menor o igual a 12
       
        IF (caja = 1 OR caja = 4 OR caja = 7 OR caja = 10) THEN !Si la caja en turno corresponde a caja 1, 4, 7 o 10
            MoveJ acercamiento,v500,z50,gripperIvan; !Movimiento en J al punto "acercamiento"
            MoveJ bajar, v500, z50, gripperIvan; !"Movimiento en L al punto donde se toma caja"
        ENDIF
        
        IF (caja = 2 OR caja = 5 OR caja = 8 OR caja = 11) THEN !Si la caja en turno corresponde a caja 2, 5, 8 u 11
            MoveL Offs(acercamiento, +92.5, 0, 0), v1000, z50, gripperIvan; != Linea 188 pero con OFFsets, se mueve 92.5mm en x para tomar la siguiente caja
            MoveL Offs(bajar, +92.5, 0, 0), v1000, z50, gripperIvan; != Linea 189 pero con OFFsets, se mueve 92.5mm en x para tomar la siguiente caja
        ENDIF
        
        IF (caja = 3 OR caja = 6 OR caja = 9 OR caja = 12) THEN !Si la caja en turno corresponde a caja 3, 6, 9 o 12
            MoveL Offs(acercamiento, +185, 0, 0), v1000, z50, gripperIvan; != Linea 193 + 185mm en x 
            MoveL Offs(bajar, +185, 0, 0), v1000, z50, gripperIvan; != Linea 194 + 185mm en x
        ENDIF
        
        WaitRob \ZeroSpeed; !Espera a que el robot este detenido para cerrar el gripper
	    Set ABB_Scalable_IO_0_DO2; !Cierra el gripper
        WaitTime 1; !Espera 1 segundo
        
        IF (caja = 1 OR caja = 4 OR caja = 7 OR caja = 10) THEN !Si la caja en turno corresponde a caja 1, 4, 7 o 10
        MoveL subirSalir, v500, z50, gripperIvan; !Se va a la posicion que sube para salir
        ENDIF
        
        IF (caja = 2 OR caja = 5 OR caja = 8 OR caja = 11) THEN !Si la caja en turno corresponde a caja 2, 5, 8 o 11
        MoveL Offs(subirSalir, +92.5, 0, +92.5), v1000, z50, gripperIvan;!= Linea 207
        ENDIF
        
        IF (caja = 3 OR caja = 6 OR caja = 9 OR caja = 12) THEN !Si la caja en turno corresponde a caja 3, 6, 9 o 12
        MoveL Offs(subirSalir, +185, 0, +92.5), v1000, z50, gripperIvan; != Linea 207
        ENDIF
        
        IF reg1=4 THEN  !Si la seleccion del arreglo por el usurio fue "Arreglo 1" se corre el PROC Caja_red que corresponde a arreglo 1
        Caja_red;
        ELSE
            Caja_red2; !Sino correr PROC Caja_red2 que corresponde al arreglo 2
        ENDIF
    ENDWHILE
    
ENDPROC

!PROC para que el usuario seleccione el arreglo que quiere
PROC seleccionarArreglo()
     TPReadFK reg1, "Selecciona el acomodo del paletizado", stEmpty, stEmpty, stEmpty, "Acomodo 1", "Acomodo 2";
    
    IF reg1=4 THEN  !Si la seleccion del arreglo por el usurio fue "Arreglo 1" se corre el PROC Caja_red que corresponde a arreglo 1
        tomarCaja;
        TPWrite "Paletizando acomodo 1";
    ELSE  !Sino correr PROC Caja_red2 que corresponde al arreglo 2
        tomarCaja;
        TPWrite "Paletizando acomodo 2";
    ENDIF
ENDPROC

!PROC para preguntar al usuario si quiere reiniciar el paletizado (Solo si ya termino)
PROC preguntaReinicio()
    TPReadFK reg1, "¿Empezar de nuevo el paletizado?", stEmpty, stEmpty, stEmpty, "Yes", "No";
    
    IF reg1=4 THEN  !Si selecciona 1 (SI)
        caja := 1;  !Reiniciar Caja a 1
        main;       !LLamar a main
        TPWrite "Reiniciando paletizado";
        !Se reinician variables de incremento
        incrOffBajarDejar := 0;      
        incrOffBajarDejar2 := 0;
        incrOffBajarDejar3 := 0;
        caja := 1;
    ELSE  !Sino parar el programa
        Stop;
        TPWrite "Paletizado finalizado";
    ENDIF
ENDPROC

ENDMODULE